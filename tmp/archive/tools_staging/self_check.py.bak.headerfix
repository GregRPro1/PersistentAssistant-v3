# --- PA_ROOT_IMPORT ---
import sys, pathlib
ROOT = pathlib.Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))
# --- /PA_ROOT_IMPORT ---
# =============================================================================
# File: tools/self_check.py
# Persistent Assistant v3 â€“ Tools Wiring Verifier
# Author: G. Rapson | GR-Analysis
# Created: 2025-08-19 09:45 BST
# Update History:
#   - 2025-08-19 09:45 BST: Initial version
# =============================================================================

from __future__ import annotations
import os, sys, json

REQUIRED = [
    "tools/fetch_ai_models.py",
    "tools/update_ai_models.py",
    "tools/check_ai_models.py",
    "tools/probe_models.py",
    "tools/check_api_keys.py",
    "tools/_env.py",
    "tools/__init__.py",
]

def main():
    proj = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    missing = [p for p in REQUIRED if not os.path.exists(os.path.join(proj, p))]
    py_ok = proj in sys.path
    print("SUMMARY: " + json.dumps({
        "project_root": proj,
        "pythonpath_contains_project": py_ok,
        "missing_files": missing,
    }, separators=(",", ":")))
if __name__ == "__main__":
    main()
