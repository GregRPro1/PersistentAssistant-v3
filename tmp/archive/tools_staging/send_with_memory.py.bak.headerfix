# --- PA_ROOT_IMPORT ---
import sys, pathlib
ROOT = pathlib.Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))
# --- /PA_ROOT_IMPORT ---

from __future__ import annotations
import os, sys, json

def _get_key(provider: str) -> str | None:
    key = None
    if provider == "openai":
        key = os.getenv("OPENAI_API_KEY")
        if not key:
            try:
                import yaml
                with open("C:/Secure/api_keys/keys.yaml","r",encoding="utf-8") as f:
                    keys = yaml.safe_load(f) or {}
                key = (((keys.get("keys") or {}).get("default") or {}).get(provider) or {}).get("paid")
            except Exception:
                pass
    return key

def main():
    if len(sys.argv) < 2:
        print("usage: python tools/send_with_memory.py \"<prompt>\" [provider=openai]")
        return 2
    prompt = sys.argv[1]
    provider = (sys.argv[2] if len(sys.argv) > 2 else "openai").lower()

    from core.ai_client import AIClient  # import after sys.path injection
    key = _get_key(provider)
    if not key:
        print(f"ERROR: missing API key for provider: {provider}")
        return 3
    cli = AIClient(provider=provider, key=key)
    res = cli.send(prompt, include_memory=True)
    out = {
        "provider": res.get("provider"),
        "model": res.get("model"),
        "context_used": res.get("context_used"),
        "tokens_in": res.get("tokens_in"),
        "tokens_out": res.get("tokens_out"),
        "cost": res.get("cost"),
        "time": round(res.get("time",0.0),3),
        "reply_head": (res.get("reply") or "")[:240]
    }
    print(json.dumps(out, ensure_ascii=False, indent=2))
    # Write a copy to tmp for supervisory checks
    try:
        (ROOT / "tmp" / "last_send_with_memory.json").write_text(json.dumps(out, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception:
        pass
    return 0

if __name__=="__main__":
    raise SystemExit(main())
