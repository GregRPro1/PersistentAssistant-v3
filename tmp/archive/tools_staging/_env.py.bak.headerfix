# --- PA_ROOT_IMPORT ---
import sys, pathlib
ROOT = pathlib.Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))
# --- /PA_ROOT_IMPORT ---
# =============================================================================
# File: tools/_env.py
# Persistent Assistant v3 – Key Resolver / Env Injector
# Author: G. Rapson | GR-Analysis
# Created: 2025-08-19 09:45 BST
# Update History:
#   - 2025-08-19 09:45 BST: Initial version
#
# Description:
#   Single source of truth for loading API keys from:
#     1) C:\Secure\api_keys\keys.yaml   (preferred)
#     2) Process environment (fallback)
#   Provides:
#     - load_keys(): returns dict {openai, anthropic, groq, google, deepseek}
#     - build_env(base_env=None): returns os.environ-like dict with
#         OPENAI_API_KEY, ANTHROPIC_API_KEY, GROQ_API_KEY, GOOGLE_API_KEY, DEEPSEEK_API_KEY
#     - mask_key(k): masked string for logs/UI
# =============================================================================



from __future__ import annotations
import os
import yaml

KEYS_FILE = r"C:\Secure\api_keys\keys.yaml"

def _read_yaml_keys():
    if not os.path.exists(KEYS_FILE):
        return {}
    with open(KEYS_FILE, "r", encoding="utf-8") as f:
        return yaml.safe_load(f) or {}

def _first_non_empty(*vals):
    for v in vals:
        if v:
            return v
    return None

def load_keys() -> dict:
    y = _read_yaml_keys()
    yk = (y.get("keys") or {})
    default = yk.get("default") or {}
    return {
        "openai":    _first_non_empty(default.get("openai", {}).get("paid"),    os.getenv("OPENAI_API_KEY")),
        "anthropic": _first_non_empty(default.get("anthropic", {}).get("paid"),
                                      default.get("anthropic", {}).get("free"),
                                      os.getenv("ANTHROPIC_API_KEY")),
        "groq":      _first_non_empty(default.get("groq", {}).get("paid"),      os.getenv("GROQ_API_KEY")),
        "google":    _first_non_empty(default.get("google", {}).get("paid"),
                                      default.get("google", {}).get("free"),
                                      os.getenv("GOOGLE_API_KEY")),
        "deepseek":  _first_non_empty(default.get("deepseek", {}).get("paid"),  os.getenv("DEEPSEEK_API_KEY")),
    }

def build_env(base_env: dict | None = None) -> dict:
    env = dict(base_env or os.environ)
    ks = load_keys()
    if ks.get("openai"):    env["OPENAI_API_KEY"]    = ks["openai"]
    if ks.get("anthropic"): env["ANTHROPIC_API_KEY"] = ks["anthropic"]
    if ks.get("groq"):      env["GROQ_API_KEY"]      = ks["groq"]
    if ks.get("google"):    env["GOOGLE_API_KEY"]    = ks["google"]
    if ks.get("deepseek"):  env["DEEPSEEK_API_KEY"]  = ks["deepseek"]
    return env

def mask_key(k: str | None) -> str:
    if not k: return "MISSING"
    if len(k) <= 8: return k[0] + "***"
    return k[:4] + "…" + k[-4:]
