# core/ai_client.py
# G. Rapson, GR-Analysis - 2025-08-18  (Patched version with cost tables)

import os
import sys
import time
import logging
import openai
import anthropic
import google.generativeai as genai
import groq
from typing import Dict, Any

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")


# -------------------------------
# Cost tables ($ per 1K tokens)
# -------------------------------
COSTS = {
    "openai": {
        "gpt-4o-mini": {"in": 0.00000015, "out": 0.0000006},  # $0.15 / $0.60 per 1M tokens
    },
    "anthropic": {
        "claude-3-5-sonnet-20240620": {"in": 0.000003, "out": 0.000015},  # $3 / $15 per 1M tokens
    },
    "groq": {
        "llama-3.1-8b-instant": {"in": 0.00000005, "out": 0.00000008},  # example pricing
        "llama-3.1-70b-versatile": {"in": 0.0000006, "out": 0.0000008},
    },
    "google": {
        "gemini-1.5-pro-latest": {"in": 0.00000035, "out": 0.00000105},  # $0.35 / $1.05 per 1M tokens
    },
    "deepseek": {
        "deepseek-chat": {"in": 0.00000014, "out": 0.00000028},
    }
}


class AIClient:
    def __init__(self, provider: str, key: str, model: str = None):
        self.provider = provider
        self.key = key
        self.model = model
        self.client = None

        if provider == "openai":
            openai.api_key = key
            if not model:
                self.model = "gpt-4o-mini"
            self.client = openai.OpenAI(api_key=key)

        elif provider == "anthropic":
            if not model:
                self.model = "claude-3-5-sonnet-20240620"
            self.client = anthropic.Anthropic(api_key=key)

        elif provider == "groq":
            if not model:
                self.model = "llama-3.1-8b-instant"
            self.client = groq.Groq(api_key=key)

        elif provider == "google":
            if not model:
                self.model = "gemini-1.5-pro-latest"
            genai.configure(api_key=key)
            self.client = genai.GenerativeModel(self.model)

        elif provider == "deepseek":
            if not model:
                self.model = "deepseek-chat"
            # TODO: add proper deepseek client wrapper
            raise NotImplementedError("DeepSeek client not wired yet")

        else:
            raise ValueError(f"Unsupported provider: {provider}")

    def send(self, prompt: str) -> Dict[str, Any]:
        """Send a prompt to the AI provider and return reply + cost info"""
        start = time.time()
        reply = None
        tokens_in, tokens_out = 0, 0

        if self.provider == "openai":
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
            )
            reply = response.choices[0].message.content
            tokens_in = response.usage.prompt_tokens
            tokens_out = response.usage.completion_tokens

        elif self.provider == "anthropic":
            response = self.client.messages.create(
                model=self.model,
                max_tokens=512,
                messages=[{"role": "user", "content": prompt}],
            )
            reply = response.content[0].text
            tokens_in = response.usage.input_tokens
            tokens_out = response.usage.output_tokens

        elif self.provider == "groq":
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
            )
            reply = response.choices[0].message.content
            tokens_in = response.usage.prompt_tokens
            tokens_out = response.usage.completion_tokens

        elif self.provider == "google":
            response = self.client.generate_content(prompt)
            reply = response.text
            # Google SDK does not return token counts directly, estimate:
            tokens_in = len(prompt.split()) * 1.3
            tokens_out = len(reply.split()) * 1.3

        else:
            raise ValueError(f"Provider {self.provider} not supported in send()")

        elapsed = time.time() - start

        # Compute cost
        c = COSTS.get(self.provider, {}).get(self.model, {"in": 0, "out": 0})
        cost = (tokens_in * c["in"] + tokens_out * c["out"]) / 1000

        return {
            "reply": reply,
            "provider": self.provider,
            "model": self.model,
            "tokens_in": tokens_in,
            "tokens_out": tokens_out,
            "cost": cost,
            "time": elapsed,
        }


if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python core/ai_client.py '<prompt>' <provider>")
        sys.exit(1)

    prompt = sys.argv[1]
    provider = sys.argv[2].lower()

    # Keys file location (fixed for now)
    import yaml
    with open("C:/Secure/api_keys/keys.yaml", "r") as f:
        keys = yaml.safe_load(f)

    # Pick default project for now
    key = keys["keys"]["default"].get(provider, {}).get("paid")
    if not key:
        print(f"No API key found for {provider}")
        sys.exit(1)

    client = AIClient(provider=provider, key=key)
    res = client.send(prompt)
    print(res)
