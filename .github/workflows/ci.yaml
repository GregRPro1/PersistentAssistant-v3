name: CI (Windows)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-test-pack:
    runs-on: windows-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip wheel setuptools

      - name: Install requirements (best-effort)
        run: |
          if (Test-Path requirements.txt) { pip install -r requirements.txt } else { Write-Host "No requirements.txt" }
          if (Test-Path requirements-dev.txt) { pip install -r requirements-dev.txt } else { Write-Host "No requirements-dev.txt" }

      - name: Self-check + forbidden-guard
        run: |
          if (Test-Path tools\self_check.py) { python tools\self_check.py } else { Write-Host "[SKIP] self_check.py" }
          if (Test-Path tools\forbidden_guard.py) { python tools\forbidden_guard.py --mode=ci } else { Write-Host "[SKIP] forbidden_guard.py" }

      - name: Export insights
        run: |
          if (Test-Path tools\export_insights.py) { python tools\export_insights.py } else { Write-Host "[SKIP] export_insights.py" }

      - name: Start LEB (background)
        run: |
          if (Test-Path tools\leb_server.py) {
            $job = Start-Job -ScriptBlock { python tools\leb_server.py }
            # Wait for ping
            $ok=$false
            1..20 | ForEach-Object {
              try {
                $r = Invoke-WebRequest -UseBasicParsing http://127.0.0.1:8765/ping -TimeoutSec 2
                if ($r.StatusCode -eq 200) { $ok=$true; break }
              } catch { Start-Sleep -Seconds 1 }
            }
            if (-not $ok) { throw "LEB did not respond to /ping" }
            # Stash the job id for next step
            Set-Content -Path leb_job_id.txt -Value $job.Id
          } else {
            Write-Host "[SKIP] tools\leb_server.py not present"
          }

      - name: Probe LEB
        run: |
          if (Test-Path tools\ci_probe.py) { python tools\ci_probe.py } else { Write-Host "[SKIP] ci_probe.py" }

      - name: Stop LEB
        if: always()
        run: |
          if (Test-Path leb_job_id.txt) {
            $jid = Get-Content leb_job_id.txt
            Stop-Job -Id $jid -ErrorAction SilentlyContinue
            Remove-Job -Id $jid -ErrorAction SilentlyContinue
          }

      - name: Apply+Pack (no replace)
        run: |
          if (Test-Path tools\apply_and_pack.py) {
            python tools\apply_and_pack.py
          } else {
            Write-Host "[SKIP] apply_and_pack.py"
          }

      - name: Upload packs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-packs
          path: tmp\feedback\*.zip
          if-no-files-found: warn
