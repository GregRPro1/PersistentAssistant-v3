from PyQt6.QtWidgets import QVBoxLayout # chat_tab.py
# Persistent Assistant v3
# Created: 2025-08-18
# Author: G. Rapson
# Company: GR-Analysis
# Description:
#   Defines the ChatTab class which embeds ChatGPT in a QWebEngineView browser window.
#   This allows real-time interaction with OpenAI’s web interface until API integration.

from PyQt6.QtWidgets import QWidget, QVBoxLayout, QLabel
from PyQt6.QtWidgets import QPushButton
from PyQt6.QtWidgets import QInputDialog
from PyQt6.QtWidgets import QMessageBox
from PyQt6.QtWebEngineWidgets import QWebEngineView
from PyQt6.QtCore import QUrl

class ChatTab(QWidget):
    """
    A Qt tab that embeds a browser window loading ChatGPT via QWebEngineView.

    This allows manual interaction with OpenAI’s web interface directly inside the GUI.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()

    def init_ui(self):
        """
        Initializes the layout and browser view for the embedded ChatGPT session.
        """
        layout = QVBoxLayout()

        self.label = QLabel("Embedded ChatGPT Browser:")
        layout.addWidget(self.label)

        self.browser = QWebEngineView()
        self.browser.page().profile().setHttpUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115 Safari/537.36")

        self.browser.load(QUrl("https://chat.openai.com"))
        layout.addWidget(self.browser)

        self.setLayout(layout)

    def on_send_api_clicked(self):
        """
        Open a prompt dialog and send text to AIClient.send(); show reply or error.
        Safe, minimal wiring for Step 4.2.
        """
        try:
            from core.ai_client import AIClient
        except Exception as e:
            QMessageBox.critical(self, "AI Error", f"AIClient import failed: {e}")
            return
        text, ok = QInputDialog.getMultiLineText(self, "Send to AI (API)", "Prompt:")
        if not ok or not (text or "").strip():
            return
        try:
            client = AIClient()
            reply = client.send(text)
            # show first chunk; avoid huge dialogs
            msg = reply if isinstance(reply, str) else str(reply)
            if len(msg) > 4000:
                msg = msg[:4000] + "\n... [truncated]"
            QMessageBox.information(self, "AI Reply", msg)
        except Exception as e:
            QMessageBox.critical(self, "AI Error", str(e))

    def ensure_api_send_button(self):
        """
        Ensure a Send to AI (API) button exists; create layout if missing; connect to handler.
        """
        try:
            layout = self.layout()
            if layout is None:
                layout = QVBoxLayout(self)
                self.setLayout(layout)
            if not hasattr(self, "api_send_btn"):
                self.api_send_btn = QPushButton("Send to AI (API)")
                self.api_send_btn.setObjectName("btn_send_api")
                self.api_send_btn.clicked.connect(self.on_send_api_clicked)
                layout.addWidget(self.api_send_btn)
        except Exception as _e:
            pass
